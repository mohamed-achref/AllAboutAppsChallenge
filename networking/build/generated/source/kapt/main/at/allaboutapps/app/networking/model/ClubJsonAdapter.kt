// Code generated by moshi-kotlin-codegen. Do not edit.
package at.allaboutapps.app.networking.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION", "RedundantExplicitType",
    "LocalVariableName")
class ClubJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Club>() {
  private val options: JsonReader.Options = JsonReader.Options.of("name", "country", "value",
      "image", "european_titles")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "name")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "value")

  override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Club").append(')') }

  override fun fromJson(reader: JsonReader): Club {
    var name: String? = null
    var country: String? = null
    var value_: Int? = null
    var image: String? = null
    var european_titles: Int? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> name = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("name", "name",
            reader)
        1 -> country = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("country",
            "country", reader)
        2 -> value_ = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("value_", "value",
            reader)
        3 -> image = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("image", "image",
            reader)
        4 -> european_titles = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("european_titles", "european_titles", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Club(
        name = name ?: throw Util.missingProperty("name", "name", reader),
        country = country ?: throw Util.missingProperty("country", "country", reader),
        value = value_ ?: throw Util.missingProperty("value_", "value", reader),
        image = image ?: throw Util.missingProperty("image", "image", reader),
        european_titles = european_titles ?: throw Util.missingProperty("european_titles",
            "european_titles", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value: Club?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("name")
    stringAdapter.toJson(writer, value.name)
    writer.name("country")
    stringAdapter.toJson(writer, value.country)
    writer.name("value")
    intAdapter.toJson(writer, value.value)
    writer.name("image")
    stringAdapter.toJson(writer, value.image)
    writer.name("european_titles")
    intAdapter.toJson(writer, value.european_titles)
    writer.endObject()
  }
}
